@page "/MiVista"
@using blazernuevo.Components.Data
@rendermode InteractiveServer
@inject Servicios.ServicioControlador ServicioControlador


<h3>Juegos</h3>

Solo ver Jugados.<input type="checkbox" @bind="ServicioControlador.MostrarSoloJugados" />
@if (ServicioControlador.MostrarSoloJugados)
{
    <ul>
        @foreach (var j in juegos.Where(j => j.Jugado))
        {
            <li>
          @j.Nombre
          @(j.Jugado ? "Ya jugado" : "Pendiente")
          <input type="checkbox" checked="@j.Jugado" @onclick="()=> cambiarJugado(j)" />
          <button @onclick="() => BorrarJuego(j)">🗑️</button>
            </li>
        }
    </ul>
}
else
{
    <ul>
        @foreach (var j in juegos)
        {
            <li>
        @j.Nombre
        @(j.Jugado ? "Ya jugado" : "Pendiente")
        <input type="checkbox" checked="@j.Jugado" @onclick="()=> cambiarJugado(j)" />
        <button @onclick="() => BorrarJuego(j)">🗑️</button>
            </li>
        }
    </ul>
}


<div>
    <input @bind="newJuego.Nombre" placeholder="Agregar Juego" />
    <button @onclick="AgregarJuego">Agregar Juego</button>
</div>

@code {
    private List<Juego> juegos = new();
    private Juego newJuego = new();

    private bool mostrarSoloJugados = false;

    private void cambiarJugado(Juego j)
    {
        Console.WriteLine($"ME CAMBIARON YO: {j.Nombre}");
        j.Jugado = !j.Jugado;
    }


  private void BorrarJuego(Juego juegoABorrar)
    {
        juegos.Remove(juegoABorrar);
        ServicioControlador.BorrarJuego(juegoABorrar);
    }

    private async Task AgregarJuego()
    {
        if (!string.IsNullOrWhiteSpace(newJuego.Nombre))
        {
            ServicioControlador.AgregarJuego(newJuego);
            juegos = await ServicioControlador.ObtenerJuegos();
            newJuego = new Juego();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        juegos = await ServicioControlador.ObtenerJuegos();
    }
}